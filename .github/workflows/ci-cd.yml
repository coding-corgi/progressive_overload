name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  ci:
    name: Fast CI (Lint, Test, Build)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Copy test env
        run: cp .env.test .env

      - name: Lint
        run: pnpm run lint

      - name: Unit Test + Coverage
        run: pnpm run test:ci

      - name: Build all services
        run: pnpm run build
    
  e2e:
    name: E2E Test with Docker Compose
    needs: ci
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: marshall
          MYSQL_DATABASE: progressive_overload
          MYSQL_USER: myuser
          MYSQL_PASSWORD: mypassword
        ports:
          - 3306:3306

      redis:
        image: redis
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: myuser
          RABBITMQ_DEFAULT_PASS: mypassword
        ports:
          - 5672:5672
          - 15672:15672
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install
      
      - name: Copy test env
        run: cp .env.test .env  
      
      - name: E2E Test 
        run: docker compose -f docker-compose.e2e.yml up --build --exit-code-from e2e-test-runner

      - name: Redis E2E Test
        run: pnpm run test:redis

  deploy:
    name: Deploy to Github Container Registry
    needs: e2e
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push account-service
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/account-service:latest -f apps/account-service/Dockerfile .
          docker push ghcr.io/${{ github.repository_owner }}/account-service:latest

      - name: Build and push challenge-service
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/challenge-service:latest -f apps/challenge-service/Dockerfile .
          docker push ghcr.io/${{ github.repository_owner }}/challenge-service:latest
          